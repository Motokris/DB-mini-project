# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QTableWidgetItem
import mysql.connector
from datetime import date


class Ui_MainWindow(object):
    rowCount = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1044, 512)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.Tabs.setGeometry(QtCore.QRect(10, 0, 1031, 471))
        self.Tabs.setObjectName("Tabs")
        self.Booking = QtWidgets.QWidget()
        self.Booking.setObjectName("tab")
        self.Update = QtWidgets.QPushButton(self.Booking)
        self.Update.setGeometry(QtCore.QRect(830, 390, 81, 31))
        self.Update.setObjectName("Update")
        self.First_name = QtWidgets.QLineEdit(self.Booking)
        self.First_name.setGeometry(QtCore.QRect(90, 130, 181, 31))
        self.First_name.setText("")
        self.First_name.setObjectName("First_name")
        self.FName = QtWidgets.QLabel(self.Booking)
        self.FName.setGeometry(QtCore.QRect(150, 110, 61, 20))
        self.FName.setObjectName("FName")
        self.Title = QtWidgets.QLabel(self.Booking)
        self.Title.setGeometry(QtCore.QRect(450, 10, 51, 21))
        self.Title.setObjectName("Title")
        self.Duration = QtWidgets.QLabel(self.Booking)
        self.Duration.setGeometry(QtCore.QRect(720, 130, 49, 16))
        self.Duration.setObjectName("Duration")
        self.Calendar = QtWidgets.QCalendarWidget(self.Booking)
        self.Calendar.setGeometry(QtCore.QRect(320, 130, 312, 190))
        self.Calendar.setObjectName("Calendar")
        self.Calendar.setMinimumDate(date.today())
        self.Calendar.setSelectedDate(date.today())
        self.LName = QtWidgets.QLabel(self.Booking)
        self.LName.setGeometry(QtCore.QRect(150, 180, 61, 20))
        self.LName.setObjectName("LName")
        self.Book = QtWidgets.QPushButton(self.Booking)
        self.Book.setGeometry(QtCore.QRect(740, 390, 81, 31))
        self.Book.setObjectName("Book")
        self.Date = QtWidgets.QLabel(self.Booking)
        self.Date.setGeometry(QtCore.QRect(460, 100, 31, 20))
        self.Date.setObjectName("Date")
        self.Choice = QtWidgets.QComboBox(self.Booking)
        self.Choice.setGeometry(QtCore.QRect(820, 150, 121, 31))
        self.Choice.setObjectName("Choice")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Choice.addItem("")
        self.Last_name = QtWidgets.QLineEdit(self.Booking)
        self.Last_name.setGeometry(QtCore.QRect(90, 200, 181, 31))
        self.Last_name.setText("")
        self.Last_name.setObjectName("Last_name")
        self.System = QtWidgets.QLabel(self.Booking)
        self.System.setGeometry(QtCore.QRect(860, 130, 49, 16))
        self.System.setObjectName("System")
        self.Contact = QtWidgets.QLineEdit(self.Booking)
        self.Contact.setGeometry(QtCore.QRect(90, 260, 181, 31))
        self.Contact.setObjectName("Contact")
        self.Time = QtWidgets.QTimeEdit(self.Booking)
        self.Time.setGeometry(QtCore.QRect(690, 150, 111, 31))
        self.Time.setObjectName("Time")
        self.Email = QtWidgets.QLabel(self.Booking)
        self.Email.setGeometry(QtCore.QRect(160, 240, 49, 16))
        self.Email.setObjectName("Email")
        self.Tabs.addTab(self.Booking, "")
        self.Table = QtWidgets.QWidget()
        self.Table.setObjectName("Table")
        self.tableWidget = QtWidgets.QTableWidget(self.Table)
        self.tableWidget.setGeometry(QtCore.QRect(40, 20, 750, 300))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(self.rowCount)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.Delete = QtWidgets.QPushButton(self.Table)
        self.Delete.setGeometry(QtCore.QRect(930, 20, 81, 31))
        self.Delete.setObjectName("Delete")
        self.InputID = QtWidgets.QLineEdit(self.Table)
        self.InputID.setGeometry(QtCore.QRect(800, 20, 111, 31))
        self.InputID.setText("")
        self.InputID.setObjectName("InputID")
        self.ID = QtWidgets.QLabel(self.Table)
        self.ID.setGeometry(QtCore.QRect(850, 0, 21, 20))
        self.ID.setObjectName("ID")
        self.Tabs.addTab(self.Table, "")
        self.Systems = QtWidgets.QWidget()
        self.Systems.setObjectName("tab_3")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.Systems)
        self.tableWidget_3.setGeometry(QtCore.QRect(90, 10, 451, 381))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(4)
        self.tableWidget_3.setRowCount(11)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(3, item)
        self.Tabs.addTab(self.Systems, "")
        self.Engineers = QtWidgets.QWidget()
        self.Engineers.setObjectName("tab_4")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.Engineers)
        self.tableWidget_2.setGeometry(QtCore.QRect(70, 30, 700, 400))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(5)
        self.tableWidget_2.setRowCount(4)
        self.tableWidget_2.setColumnWidth(3, 200)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        self.Tabs.addTab(self.Engineers, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1044, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.Tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Book.clicked.connect(self.addValues)
        self.Delete.clicked.connect(self.deleteValues)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "App"))
        self.FName.setText(_translate("MainWindow", "First Name"))
        self.Title.setText(_translate("MainWindow", "Booking"))
        self.Duration.setText(_translate("MainWindow", "Duration"))
        self.LName.setText(_translate("MainWindow", "Last Name"))
        self.Book.setText(_translate("MainWindow", "Add"))
        self.Date.setText(_translate("MainWindow", "Date"))
        self.Choice.setItemText(0, _translate("MainWindow", "PC1"))
        self.Choice.setItemText(1, _translate("MainWindow", "PC2"))
        self.Choice.setItemText(2, _translate("MainWindow", "PC3"))
        self.Choice.setItemText(3, _translate("MainWindow", "PC4"))
        self.Choice.setItemText(4, _translate("MainWindow", "PC5"))
        self.Choice.setItemText(5, _translate("MainWindow", "Console1"))
        self.Choice.setItemText(6, _translate("MainWindow", "Console2"))
        self.Choice.setItemText(7, _translate("MainWindow", "Console3"))
        self.Choice.setItemText(8, _translate("MainWindow", "Console4"))
        self.Choice.setItemText(9, _translate("MainWindow", "Simulator1"))
        self.Choice.setItemText(10, _translate("MainWindow", "Simulator2"))
        self.System.setText(_translate("MainWindow", "System"))
        self.Email.setText(_translate("MainWindow", "Email"))
        self.Update.setText(_translate("MainWindow", "Update"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Booking), _translate("MainWindow", "Booking"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Email"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Date"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Duration"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "System"))
        self.Delete.setText(_translate("MainWindow", "Delete"))
        self.ID.setText(_translate("MainWindow", "ID"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Table), _translate("MainWindow", "Table"))
        item = self.tableWidget_3.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "SysID"))
        item = self.tableWidget_3.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "System"))
        item = self.tableWidget_3.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Available"))
        item = self.tableWidget_3.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Engineer"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Systems), _translate("MainWindow", "Systems"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Contact"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Engineers), _translate("MainWindow", "Engineers"))

    def initValues(self):
        data = [
            {"system": "PC1", "Engineer": "1"},
            {"system": "PC2", "Engineer": "1"},
            {"system": "PC3", "Engineer": "1"},
            {"system": "PC4", "Engineer": "2"},
            {"system": "PC5", "Engineer": "2"},
            {"system": "Console1", "Engineer": "3"},
            {"system": "Console2", "Engineer": "3"},
            {"system": "Console3", "Engineer": "3"},
            {"system": "Console4", "Engineer": "3"},
            {"system": "Simulator1", "Engineer": "4"},
            {"system": "Simulator2", "Engineer": "4"}
        ]
        for x in range(1, 12):
            self.tableWidget_3.setItem(x - 1, 0, QTableWidgetItem(str(x)))
            self.tableWidget_3.setItem(x - 1, 2, QTableWidgetItem("Yes"))
        x = 0
        for y in data:
            self.tableWidget_3.setItem(x, 1, QTableWidgetItem(y["system"]))
            self.tableWidget_3.setItem(x, 3, QTableWidgetItem(y["Engineer"]))
            x += 1
        for x in range(1, 5):
            self.tableWidget_2.setItem(x - 1, 0, QTableWidgetItem(str(x)))
        self.tableWidget_2.setItem(0, 1, QTableWidgetItem("John"))
        self.tableWidget_2.setItem(0, 2, QTableWidgetItem("Doe"))
        self.tableWidget_2.setItem(0, 3, QTableWidgetItem("johndoe@gmail.com"))
        self.tableWidget_2.setItem(1, 1, QTableWidgetItem("Bill"))
        self.tableWidget_2.setItem(1, 2, QTableWidgetItem("Dough"))
        self.tableWidget_2.setItem(1, 3, QTableWidgetItem("billd27@gmail.com"))
        self.tableWidget_2.setItem(2, 1, QTableWidgetItem("Alex"))
        self.tableWidget_2.setItem(2, 2, QTableWidgetItem("Martin"))
        self.tableWidget_2.setItem(2, 3, QTableWidgetItem("marlex@gmail.com"))
        self.tableWidget_2.setItem(3, 1, QTableWidgetItem("Andrew"))
        self.tableWidget_2.setItem(3, 2, QTableWidgetItem("Tate"))
        self.tableWidget_2.setItem(3, 3, QTableWidgetItem("cobratate@gmail.com"))

    def addValues(self):
        fname = self.First_name.text()
        lname = self.Last_name.text()
        email = self.Contact.text()
        date = self.Calendar.selectedDate().toString("yyyy-MM-d")
        duration = self.Time.time()
        system = self.Choice.currentText()
        sysnr = self.Choice.currentIndex()

        check = duration.hour() * 3600 + duration.minute() * 60 + duration.second()

        if fname and lname and email and date and duration and system is not None:
            if '@' in email and '.com' in email:
                if check != 0:
                    self.tableWidget.insertRow(self.rowCount)
                    self.rowCount += 1
                    self.tableWidget.setItem(self.rowCount - 1, 0, QTableWidgetItem(str(self.rowCount)))
                    self.tableWidget.setItem(self.rowCount - 1, 1, QTableWidgetItem(fname))
                    self.tableWidget.setItem(self.rowCount - 1, 2, QTableWidgetItem(lname))
                    self.tableWidget.setItem(self.rowCount - 1, 3, QTableWidgetItem(email))
                    self.tableWidget.setItem(self.rowCount - 1, 4, QTableWidgetItem(date))
                    self.tableWidget.setItem(self.rowCount - 1, 5, QTableWidgetItem(duration.toString("hh:mm")))
                    self.tableWidget.setItem(self.rowCount - 1, 6, QTableWidgetItem(system))
                    duration = duration.toString("hhmm")
                    insertValues(self.rowCount, fname, lname, email, date, duration, sysnr + 1)
                    msg = QMessageBox()
                    msg.setWindowTitle("Result")
                    msg.setText("Success")
                    msg.setIcon(QMessageBox.Information)
                    msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setWindowTitle("Result")
                    msg.setText("Duration must be greater than 0")
                    msg.setIcon(QMessageBox.Information)
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setWindowTitle("Result")
                msg.setText("Wrong email")
                msg.setIcon(QMessageBox.Information)
                msg.exec_()
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Result")
            msg.setText("One or more inputs in empty")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()

    def deleteValues(self):
        id = self.InputID.text()
        if id != "":
            deleteValues(id)
            msg = QMessageBox()
            msg.setWindowTitle("Result")
            msg.setText("Booking deleted")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Result")
            msg.setText("Please input ID of booking to delete")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()



def initTables():
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        passwd="root",
        database="tema"
    )
    cur = db.cursor()

    cur.execute("CREATE TABLE Engineers ("
               "ID SMALLINT PRIMARY KEY AUTO_INCREMENT, "
               "First_name VARCHAR(25), "
               "Last_name VARCHAR(25), "
               "Contact VARCHAR(25) UNIQUE)")

    cur.execute("CREATE TABLE Systems ("
                "SysID SMALLINT PRIMARY KEY AUTO_INCREMENT, "
                "SystemType VARCHAR(25), "
                "Available BOOL, "
                "EngineerID SMALLINT, FOREIGN KEY(EngineerID) REFERENCES Engineers(ID))")

    cur.execute("CREATE TABLE Bookings ("
                "ID SMALLINT PRIMARY KEY, "
                "First_name VARCHAR(25), "
                "Last_name VARCHAR(25), "
                "Email VARCHAR(25) UNIQUE,"
                "BookDate DATE,"
                "Duration TIME NOT NULL,"
                "SystemBook SMALLINT, FOREIGN KEY(SystemBook) REFERENCES Systems(SysID))")

    cur.execute("INSERT INTO Engineers (First_name, Last_name, Contact) VALUES (%s, %s, %s)", ("John", "Doe", "johndoe@gmail.com"))
    db.commit()
    cur.execute("INSERT INTO Engineers (First_name, Last_name, Contact) VALUES (%s, %s, %s)",
                ("Bill", "Dough", "billd27@gmail.com"))
    db.commit()
    cur.execute("INSERT INTO Engineers (First_name, Last_name, Contact) VALUES (%s, %s, %s)",
                ("Alex", "Martin", "marlex@gmail.com"))
    db.commit()
    cur.execute("INSERT INTO Engineers (First_name, Last_name, Contact) VALUES (%s, %s, %s)",
                ("Andrew", "Daniel", "dandrew@gmail.com"))
    db.commit()

    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("PC1", True, 1))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("PC2", True, 1))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("PC3", True, 1))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("PC4", True, 2))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("PC5", True, 2))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Console1", True, 3))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Console2", True, 3))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Console3", True, 3))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Console4", True, 3))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Simulator1", True, 4))
    db.commit()
    cur.execute("INSERT INTO Systems (SystemType, Available, EngineerID) VALUES (%s, %s, %s)", ("Simulator2", True, 4))
    db.commit()

def insertValues(count, fname, lname, email, date, duration, sysnr):
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        passwd="root",
        database="tema"
    )
    cur = db.cursor()
    try:
        cur.execute("INSERT INTO Bookings VALUES(%s, %s, %s, %s, %s, %s, %s)",
                    (count, fname, lname, email, date, duration, sysnr))
        db.commit()
    except mysql.connector.Error as error:
        print(error)

def deleteValues(id):
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        passwd="root",
        database="tema"
    )
    cur = db.cursor()
    try:
        cur.execute("DELETE FROM Bookings WHERE ID=" + id)
    except mysql.connector.Error as error:
        print(error)

def removeTables():
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        passwd="root",
        database="tema"
    )
    cur = db.cursor()
    cur.execute("DROP TABLE Bookings")
    cur.execute("DROP TABLE Systems")
    cur.execute("DROP TABLE Engineers")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    removeTables()
    ui.initValues()
    initTables()
    MainWindow.show()
    sys.exit(app.exec_())
